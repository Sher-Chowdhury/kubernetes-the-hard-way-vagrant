---

- name: Run kubeadm init command
  command: /usr/bin/kubeadm init --apiserver-advertise-address 10.2.5.110 --pod-network-cidr=192.168.0.0/16
  args:
    creates: /etc/kubernetes/kubelet.conf
  register: kubeadm_init_output
  # the '--apiserver-advertise-address' is just needed for this vagrant environment to work. we are saying, use eth1. See
  # the vagrantfile for more info. 

- name: kubeadm init output
  copy:
    content: "{{ kubeadm_init_output.stdout }}"
    dest: /vagrant/kube_cache/kubeadm_init_output.txt
  when: kubeadm_init_output.changed

# the above output contains the join command:

#   kubeadm join 10.0.2.15:6443 --token 9689ba.ljy5o3be4qqrj2d3 --discovery-token-ca-cert-hash sha256:dc291e60765ffaad618629e13426910430725a1808da8d195cdb5fffec5fb75b

# the token part that's provided is only valid for 24 hours:

# root@kube-master:~# kubeadm token list
# TOKEN                     TTL       EXPIRES                USAGES                   DESCRIPTION                                                EXTRA GROUPS
# 9689ba.ljy5o3be4qqrj2d3   10h       2019-03-17T20:05:50Z   authentication,signing   The default bootstrap token generated by 'kubeadm init'.   system:bootstrappers:kubeadm:default-node-token 


# It you want to generate new token run:
# $ kubeadm token create

# this doesn't invalidate the existing, it just means you now have multiple valid tokens. 

# alternatively to retrieve the token again, firt you retrieve the token value:

# root@kube-master:~# kubeadm token list
# TOKEN                     TTL       EXPIRES                USAGES                   DESCRIPTION   EXTRA GROUPS
# pgqx2b.0p8y9q7t101j2bg0   23h       2019-03-18T10:03:22Z   authentication,signing   <none>        system:bootstrappers:kubeadm:default-node-token

# you can do:

# openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'


- name: Create kubectl client config folder
  file:
    path: /root/.kube
    state: directory
    mode: 0755

- name: copy kubectl client file to config folder
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    remote_src: yes
# you should now be able to run the kubectl command, e.g.: kubectl get nodes

- name: enable kubectl autocomplete
  shell: /bin/echo "source <(kubectl completion bash)" >> ~/.bashrc
  when: kubeadm_init_output.changed

#Â At this point we should have:
# $ kubectl get pods --namespace=kube-system -o wide
#NAME                                  READY   STATUS    RESTARTS   AGE    IP          NODE          NOMINATED NODE   READINESS GATES
#coredns-86c58d9df4-r8bsg              0/1     Pending   0          107m   <none>      <none>        <none>           <none>
#coredns-86c58d9df4-xz7wb              0/1     Pending   0          107m   <none>      <none>        <none>           <none>
#etcd-kube-master                      1/1     Running   0          106m   10.0.2.15   kube-master   <none>           <none>
#kube-apiserver-kube-master            1/1     Running   0          106m   10.0.2.15   kube-master   <none>           <none>
#kube-controller-manager-kube-master   1/1     Running   0          106m   10.0.2.15   kube-master   <none>           <none>
#kube-proxy-xvt5l                      1/1     Running   0          107m   10.0.2.15   kube-master   <none>           <none>
#kube-scheduler-kube-master            1/1     Running   0          107m   10.0.2.15   kube-master   <none>           <none>
